// <auto-generated />
using System;
using BookLibrary.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookLibrary.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241205181929_UpgradeDotnet9")]
    partial class UpgradeDotnet9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("book_library")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookLibrary.Domain.Aggregates.Abonents.Abonent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.HasKey("Id")
                        .HasName("pk_abonents");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_abonents_email");

                    b.ToTable("abonents", "book_library");
                });

            modelBuilder.Entity("BookLibrary.Domain.Aggregates.Books.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("authors");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("Isbn", "PublicationDate")
                        .HasDatabaseName("ix_books_isbn_publication_date");

                    b.ToTable("books", "book_library");
                });

            modelBuilder.Entity("BookLibrary.Domain.Aggregates.Books.BookStat", b =>
                {
                    b.Property<string>("Isbn")
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("authors");

                    b.Property<int>("AvailableCount")
                        .HasColumnType("integer")
                        .HasColumnName("available_count");

                    b.Property<int>("BorrowedCount")
                        .HasColumnType("integer")
                        .HasColumnName("borrowed_count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Isbn", "PublicationDate")
                        .HasName("pk_book_stats");

                    b.HasIndex("Authors")
                        .HasDatabaseName("ix_book_stats_authors");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Authors"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Authors"), new[] { "gin_trgm_ops" });

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_book_stats_title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Title"), new[] { "gin_trgm_ops" });

                    b.ToTable("book_stats", "book_library");
                });

            modelBuilder.Entity("BookLibrary.Infrastructure.Books.BookStatChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AvailableCount")
                        .HasColumnType("integer")
                        .HasColumnName("available_count");

                    b.Property<int>("BorrowedCount")
                        .HasColumnType("integer")
                        .HasColumnName("borrowed_count");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("isbn");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("publication_date");

                    b.HasKey("Id")
                        .HasName("pk_book_stat_changes");

                    b.ToTable("book_stat_changes", "book_library");
                });

            modelBuilder.Entity("BookLibrary.Domain.Aggregates.Abonents.Abonent", b =>
                {
                    b.OwnsOne("BookLibrary.Domain.Aggregates.Abonents.AbonentName", "Name", b1 =>
                        {
                            b1.Property<Guid>("AbonentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text")
                                .HasColumnName("patronymic");

                            b1.Property<string>("Surname")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("surname");

                            b1.HasKey("AbonentId");

                            b1.ToTable("abonents", "book_library");

                            b1.WithOwner()
                                .HasForeignKey("AbonentId")
                                .HasConstraintName("fk_abonents_abonents_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibrary.Domain.Aggregates.Books.Book", b =>
                {
                    b.OwnsOne("BookLibrary.Domain.Aggregates.Books.BorrowInfo", "BorrowInfo", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("AbonentId")
                                .HasColumnType("uuid")
                                .HasColumnName("borrowed_by_abonent_id");

                            b1.Property<DateTimeOffset>("BorrowedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("borrowed_at");

                            b1.Property<DateOnly>("ReturnBefore")
                                .HasColumnType("date")
                                .HasColumnName("borrowed_return_before");

                            b1.HasKey("BookId");

                            b1.ToTable("books", "book_library");

                            b1.WithOwner()
                                .HasForeignKey("BookId")
                                .HasConstraintName("fk_books_books_id");
                        });

                    b.Navigation("BorrowInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
